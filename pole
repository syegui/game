package com.company;

// Подключения необходимых библиотек

import com.sun.tools.javac.Main;

import javax.imageio.*;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;

import java.awt.*;

import java.awt.event.*;

import java.io.*;

// Класс панели, которая является игровым полем

public class pole extends JPanel{

{

    private Image shapka; // Закрытая Переменная класса, в которую загружается шапка

    private Image fon; // Закрытая Переменная класса, в которую загружается фон

    public int x = 400; // Открытая Переменная класса, в которую загружается шапка

    private int slogn; // Переменная сложности игры

    private podar[] gamePodar; // Массив подарков

    private Image end_game; // Изображение Окончания игры

    public Timer timerUpdate,timerDraw; // Два таймера

    String ANSI_RED = "\u001B[31m";

    String ANSI_GREEN = "\u001B[32m";

    String ANSI_RESET = "\u001B[0m";

    public static int score = 0;

    public static int num = 0;





    // Здесь закончили
    // Конструктор класса

    public pole(int slogn)

    {

        this.slogn = slogn;

        // Загрузка изображения шапки из файла

        try

        {

            shapka = ImageIO.read(new File("C:\\Users\\powha\\Documents\\CTT\\ЗАНЯТИЯ\\Конкурсы\\Проекты\\NYRain\\src\\com\\company\\images\\shapka.png"));

        }

        catch(IOException ex) {System.out.println(ANSI_RED + "Не могу найти файл шапки." + ANSI_RESET);}



        // Загрузка изображения фона из файла

        try

        {

            fon = ImageIO.read(new File("C:\\Users\\powha\\Documents\\CTT\\ЗАНЯТИЯ\\Конкурсы\\Проекты\\NYRain\\src\\com\\company\\images\\fon.jpg"));

        }

        catch(IOException ex) {System.out.println("Не могу найти файл фона.");}



        // Загрузка изображения Окончания игры

        try

        {

            end_game = ImageIO.read(new File("C:\\Users\\powha\\Documents\\CTT\\ЗАНЯТИЯ\\Конкурсы\\Проекты\\NYRain\\src\\com\\company\\images\\end_game.png"));

        }

        catch(IOException ex) {System.out.println("Не могу найти файл Game Over.");}



        //  Загрузка семи изображений подарков

        gamePodar = new podar[7];

        for (int i=0;i<7;i++)

        {

            try

            {

                gamePodar[i] = new podar(ImageIO.read(new File("C:\\Users\\powha\\Documents\\CTT\\ЗАНЯТИЯ\\Конкурсы\\Проекты\\NYRain\\src\\com\\company\\images\\p"+i+".png")));

            }

            catch (IOException ex) {System.out.println("Не могу найти файлы подарков.");}

        }



// Создание таймера,

//который будет раз в три секунды проверять подарки и добавлять их на //игровое поле          

        timerUpdate = new Timer(3000,new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                // Метод для проверки и добавление подарков на игровое поле

                updateStart();

            }

        });

        timerUpdate.start(); // Запуск таймера timerUpdate



// Создание таймера,

//который будет перерисовывать игровое поле 20 раз в секунду          

        timerDraw = new Timer(50,new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                repaint(); // Запуск метода перерисовки поля (public void paintComponent(Graphics gr))

            }

        });

        timerDraw.start(); // Запуск таймера для перерисовки




    }



    // Метод, который отрисовывает графические объекты на панели

    public void paintComponent(Graphics gr)

    {

        // Выполнить отрисовку сначала самого окна

        super.paintComponent(gr);

        gr.drawImage(fon, 0, 0, null); // Рисование фона

        gr.drawImage(shapka, x, 465, null); // Рисование шапки

        // Цикл, который отображает подарки на игровом поле и проверяет пропущенные подарки

        for (int i=0;i<7;i++)

        {

            gamePodar[i].draw(gr); // Отображение подарка

            if (gamePodar[i].act==true) // Если подарок из массива подарков активен

            {

                // Если подарок достиг нижней границы:

                if ((gamePodar[i].y+gamePodar[i].img.getHeight(null))>=470)                               {

                    if (Math.abs(gamePodar[i].x - x) > 75) // Если подарок пропущен

                    {

                        // Вывод картинки Окончания игры

                        gr.drawImage(end_game, 300, 300, null);

                        timerDraw.stop(); // Оставнока таймера timerDraw

                        timerUpdate.stop(); // Оставнока таймера timerUpdate

                        Clip clip = getClip("C:\\Users\\powha\\Documents\\CTT\\ЗАНЯТИЯ\\Конкурсы\\Проекты\\NYRain\\src\\com\\company\\audio\\game_over.wav");
                        Thread thread = playForever(clip);
                        // ...
                        // do stuff
                        // ...
                        boolean play = true;
                        if (!play) stopAudio(thread);

                        break; // Прерывание цикла

                    }

                    // Снятие подарка с игрового поля, если он пойман шапкой

                    else

                    {
                        gamePodar[i].act=false;

                        Clip clip = getClip("C:\\Users\\powha\\Documents\\CTT\\ЗАНЯТИЯ\\Конкурсы\\Проекты\\NYRain\\src\\com\\company\\audio\\coin.wav");
                        Thread thread = playForever(clip);
                        // ...
                        // do stuff
                        // ...
                        boolean play = true;
                        if (!play) stopAudio(thread);

                        public static int getNum() { //Параметры - пустые!
                        num++;
                        System.out.println(ANSI_GREEN + num +ANSI_RESET);
                        return num;
                        }
                        }

                    }

                }

            }

        }

    }

    // Метод для проверки и добавления подарков на игровое поле

    private void updateStart()

    {

        int kol=0; // Переменная для подсчета подарков на игровом поле

        for (int i=0;i<7;i++) // Цикл перебора всех подарков массива

        {

            if (gamePodar[i].act==false) // Если подарок не на игровом поле

            {

                if (kol<slogn) // Если текущее количество менее номера сложности (от 1 до 7)

                {

                    // Активизация подарка на игровом поле, вывод его сверху игрового поля

                    gamePodar[i].start();

                    break; // Прерывание цикла

                }

            }

            else kol++; // Если подарок на игровом поле

        }

    }

    public static Thread playForever(Clip clip) {
        Thread thread = new Thread(() -> {
            //clip.loop(Clip.LOOP_CONTINUOUSLY);
            clip.start();
            synchronized (Thread.currentThread()) {
                try {
                    Thread.currentThread().wait();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        thread.start();
        return thread;
    }

    public static void stopAudio(Thread thread) {
        synchronized (thread) {
            thread.notify();
        }
    }

    public static Clip getClip(String filepath) {
        String reset = "\u001B[0m";
        String red = "\u001B[31m";
        try {
            Clip clip = AudioSystem.getClip();
            clip.open(AudioSystem.getAudioInputStream(new File(filepath)));
            return clip;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error. Can't find an audiofile skeleton.wav");
            System.out.println(red + "Error. Can't find an audiofile skeleton.wav" + reset);
            throw new RuntimeException(e);
        }
    }

}
